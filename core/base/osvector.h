#ifndef __OSVECTOR_H__
#define __OSVECTOR_H__
#include "osdefine.h"
#ifdef __cplusplus
extern "C"
{
#endif
typedef struct OsVector
{
	unsigned char *buff;
	size_t unitSize;
	size_t size;
	size_t maxSize;
} OsVector;
/*********************************************************************************************************************
* 初始化容器
* obj 容器对象
* unitSize 元素大小
* return 0：初始化成功
*********************************************************************************************************************/
int osVectorInit(OsVector *obj, size_t unitSize);
/*********************************************************************************************************************
* 释放容器
* obj 容器对象
*********************************************************************************************************************/
void osVectorFree(OsVector *obj);
/*********************************************************************************************************************
* 获取容器大小
* obj 容器对象
*********************************************************************************************************************/
size_t osVectorSize(OsVector *obj);
/*********************************************************************************************************************
* 获取当前最大容量
* obj 容器对象
*********************************************************************************************************************/
size_t osVectorMaxSize(OsVector *obj);
/*********************************************************************************************************************
* 获取元素大小
* obj 容器对象
*********************************************************************************************************************/
size_t osVectorUnitSize(OsVector *obj);
/*********************************************************************************************************************
* 判断容器是否为空
* obj 容器对象
*********************************************************************************************************************/
int osVectorEmpty(OsVector *obj);
/*********************************************************************************************************************
* 调整容器最大容量
* obj 容器对象
* size 调整后的容量，只能比原来的大
* return 调整后的容量
*********************************************************************************************************************/
size_t osVectorResize(OsVector *obj, size_t size);
/*********************************************************************************************************************
* 从后面添加元素
* obj 容器对象
* data 数据
* return 元素数目
*********************************************************************************************************************/
size_t osVectorPushBack(OsVector *obj, void *data);
/*********************************************************************************************************************
* 从前面添加元素
* obj 容器对象
* data 数据
* return 元素数目
*********************************************************************************************************************/
size_t osVectorPushFront(OsVector *obj, void *data);
/*********************************************************************************************************************
* 插入元素
* obj 容器对象
* data 数据
* n 插入位置
* return 元素数目
*********************************************************************************************************************/
size_t osVectorInsert(OsVector *obj, void *data, size_t n);
/*********************************************************************************************************************
* 访问最后的元素
* obj 容器对象
* return 返回的数据指针
*********************************************************************************************************************/
void *osVectorBack(OsVector *obj);
/*********************************************************************************************************************
* 访问第一个元素
* obj 容器对象
* return 返回的数据指针
*********************************************************************************************************************/
void *osVectorFront(OsVector *obj);
/*********************************************************************************************************************
* 访问元素
* obj 容器对象
* n 元素位置
* return 返回的数据指针
*********************************************************************************************************************/
void *osVectorAt(OsVector *obj, size_t n);
/*********************************************************************************************************************
* 移除元素
* obj 容器对象
* n 元素位置
* return 0:成功移除
*********************************************************************************************************************/
int osVectorErase(OsVector *obj, size_t n);
/*********************************************************************************************************************
* 清空所有元素
* obj 容器对象
*********************************************************************************************************************/
void osVectorClear(OsVector *obj);
/*********************************************************************************************************************
* 从后面移除一个元素
* obj 容器对象
* return 0:成功移除
*********************************************************************************************************************/
int osVectorPopBack(OsVector *obj);
/*********************************************************************************************************************
* 从前面移除一个元素
* obj 容器对象
* return 0:成功移除
*********************************************************************************************************************/
int osVectorPopFront(OsVector *obj);
#ifdef __cplusplus
}
#endif
#endif