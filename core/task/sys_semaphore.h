#ifndef __SYS_SEMAPHORE_H__
#define __SYS_SEMAPHORE_H__
#include "sys_tree.h"
#include "sys_list.h"
#ifdef __cplusplus
extern "C"
{
#endif
#define SYS_SEMAPHORE_MAX_WAIT_TIME ((uint64_t)-1 / 1000 / 1000)
typedef struct sys_semaphore_t
{
    int count;
    int max_count;
    sys_tree_node_t *high_priority_task;
    sys_tree_node_t *wait_rt_task_list;
    sys_list_node_t *wait_task_list;
} sys_semaphore_t;
/*********************************************************************************************************************
* 创建信号量
* semaphore：信号量对象
* count：初始值
* max_count：最大信号个数
* return：0：调用成功
*********************************************************************************************************************/
int sys_semaphore_create(sys_semaphore_t *semaphore, int count, int max_count);
/*********************************************************************************************************************
* 删除信号量，如果有任务正在阻塞，会删除失败
* semaphore：信号量对象
* return：0：调用成功
*********************************************************************************************************************/
int sys_semaphore_destory(sys_semaphore_t *semaphore);
/*********************************************************************************************************************
* 清空信号量
* semaphore：信号量对象
*********************************************************************************************************************/
void sys_semaphore_reset(sys_semaphore_t *semaphore);
/*********************************************************************************************************************
* 释放一个信号
* semaphore：信号量对象
* return：0：调用成功
*********************************************************************************************************************/
int sys_semaphore_post(sys_semaphore_t *semaphore);
/*********************************************************************************************************************
* 等待信号
* semaphore：信号量对象
* wait：等待时间，0表示马上返回，SYS_SEMAPHORE_MAX_WAIT_TIME表示永久等待
* return：0：调用成功
*********************************************************************************************************************/
int sys_semaphore_wait(sys_semaphore_t *semaphore, uint64_t wait);
/*********************************************************************************************************************
* 获取信号数量
* semaphore：信号量对象
* return：信号数量
*********************************************************************************************************************/
int sys_semaphore_get_semaphore_count(sys_semaphore_t *semaphore);
/*********************************************************************************************************************
* 获取最大信号数量
* semaphore：信号量对象
* return：最大信号数量
*********************************************************************************************************************/
int sys_semaphore_get_max_semaphore_count(sys_semaphore_t *semaphore);
#ifdef __cplusplus
}
#endif
#endif