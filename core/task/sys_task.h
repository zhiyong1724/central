#ifndef __SYS_TASK_H__
#define __SYS_TASK_H__
#include "sys_cfg.h"
#ifdef __cplusplus
extern "C"
{
#endif
typedef int sys_tid_t;
typedef void *(*task_function_t)(void *arg);
typedef enum sys_task_state_t
{
    SYS_TASK_STATE_READY,
    SYS_TASK_STATE_SLEEP,
    SYS_TASK_STATE_SUSPENDED,
    SYS_TASK_STATE_DELETED,
    SYS_TASK_STATE_BLOCKED,
} sys_task_state_t;

typedef enum sys_task_type_t
{
    SYS_TASK_TYPE_RT,
    SYS_TASK_TYPE_DT,
    SYS_TASK_TYPE_IDLE,
} sys_task_type_t;

typedef int sys_task_ptr;
typedef struct sys_task_info_t
{
    sys_tid_t tid;
    sys_tid_t ptid;
    char name[SYS_TASK_MAX_NAME_LEN];
    stack_size_t *stack;
    int stack_size;
    sys_task_state_t task_state;
    sys_task_type_t task_type;
    int priority;
} sys_task_info_t;
/*********************************************************************************************************************
* 创建任务
* task_function：任务处理函数
* arg：传给任务的参数
* name：任务名称，最大长度为SYS_TASK_MAX_NAME_LEN
* priority：优先级范围为0-39
* stack_size：任务堆栈大小
* tid：任务tid
* return：0：调用成功
*********************************************************************************************************************/
int sys_task_create(sys_tid_t *tid, task_function_t task_function, void *arg, const char *name, int priority, int stack_size);
/*********************************************************************************************************************
* 创建实时任务
* task_function：任务处理函数
* arg：传给任务的参数
* name：任务名称，最大长度为SYS_TASK_MAX_NAME_LEN
* priority：任务优先级范围0-63
* stack_size：任务堆栈大小
* tid：任务tid
* return：0：调用成功
*********************************************************************************************************************/
int sys_task_create_rt(sys_tid_t *tid, task_function_t task_function, void *arg, const char *name, int priority, int stack_size);
/*********************************************************************************************************************
* 时钟滴答
* ns：输入与上次tick的时间间隔，输出下次tick的时间间隔
*********************************************************************************************************************/
void sys_task_tick(uint64_t *ns);
/*********************************************************************************************************************
* 修改优先级
* tid：任务tid
* priority：优先级
* return：0:调用成功
*********************************************************************************************************************/
int sys_task_modify_priority(sys_tid_t tid, int priority);
/*********************************************************************************************************************
* 休眠一段时间
* ms：休眠的时间
*********************************************************************************************************************/
void sys_task_sleep(uint64_t ms);
/*********************************************************************************************************************
* 挂起一个任务
* tid：要挂起的任务tid
* return：0：调用成功
*********************************************************************************************************************/
int sys_task_supend(sys_tid_t tid);
/*********************************************************************************************************************
* 恢复一个任务
* tid：要恢复的任务tid
* return：0：调用成功
*********************************************************************************************************************/
int sys_task_resume(sys_tid_t tid);
/*********************************************************************************************************************
* 退出当前任务
* arg：任务退出参数
*********************************************************************************************************************/
void sys_task_exit(void *arg);
/*********************************************************************************************************************
* 开始任务调度
* return：这个函数不会返回
*********************************************************************************************************************/
void sys_task_start();
/*********************************************************************************************************************
* 等待子任务退出
* retval：任务退出参数
* tid：等待任务tid
* return：0：调用成功
*********************************************************************************************************************/
int sys_task_join(void **retval, int tid);
/*********************************************************************************************************************
* 把任务与父任务分离
* tid：分离任务tid
* return：0：调用成功
*********************************************************************************************************************/
int sys_task_detach(sys_tid_t tid);
/*********************************************************************************************************************
* 获取系统ticks
* return：系统ticks
*********************************************************************************************************************/
uint64_t sys_task_get_tick_count();
/*********************************************************************************************************************
* 获取任务个数
* return：任务个数
*********************************************************************************************************************/
int sys_task_get_task_count();
/*********************************************************************************************************************
* 获取当前任务TID
* return：当前任务TID
*********************************************************************************************************************/
sys_tid_t sys_task_get_tid();
/*********************************************************************************************************************
* 获取任务优先级
* priority：任务优先级
* tid：任务tid
* return：0：调用成功
*********************************************************************************************************************/
int sys_task_get_task_priority(int *priority, sys_tid_t tid);
/*********************************************************************************************************************
* 获取任务调度类型
* type：任务调度类型
* tid：任务tid
* return：0：调用成功
*********************************************************************************************************************/
int sys_task_get_task_type(sys_task_type_t *type, sys_tid_t tid);
/*********************************************************************************************************************
* 获取任务状态
* state：任务状态
* tid：任务tid
* return：0：调用成功
*********************************************************************************************************************/
int sys_task_get_task_state(sys_task_state_t *state, sys_tid_t tid);
/*********************************************************************************************************************
* 获取任务名
* name：任务名
* size：name buffer大小
* tid：任务tid
* return：0：调用成功
*********************************************************************************************************************/
int sys_task_get_task_name(char *name, int size, sys_tid_t tid);
/*********************************************************************************************************************
* 获取任务堆栈大小
* stack_size：任务堆栈大小
* tid：任务tid
* return：0：调用成功
*********************************************************************************************************************/
int sys_task_get_task_stack_size(int *stack_size, sys_tid_t tid);
/*********************************************************************************************************************
* 返回任务是否为joinable
* tid：任务tid
* return：>0：joinable,0：Detach
*********************************************************************************************************************/
int sys_task_joinable(sys_tid_t tid);
/*********************************************************************************************************************
* 获取cpu占用
* task_manager：sys_task_manager_t对象
* return：cpu占用
*********************************************************************************************************************/
int sys_task_get_cpu_usage();
/*********************************************************************************************************************
* 发现第一个任务信息
* task_ptr：当前位置
* task_info：任务信息
* return：0：调用成功
*********************************************************************************************************************/
int sys_task_find_first(sys_task_ptr *task_ptr, sys_task_info_t *task_info);
/*********************************************************************************************************************
* 发现下一个任务信息
* task_ptr：当前位置
* task_info：任务信息
* return：0：调用成功
*********************************************************************************************************************/
int sys_task_find_next(sys_task_ptr *task_ptr, sys_task_info_t *task_info);
#ifdef __cplusplus
}
#endif
#endif