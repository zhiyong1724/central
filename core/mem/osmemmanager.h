#ifndef __OSMEMMANAGER_H__
#define __OSMEMMANAGER_H__
#include "osbuddy.h"
#include "ostree.h"
#ifdef __cplusplus
extern "C"
{
#endif
typedef struct OsMemManager
{
	OsBuddy pageFactory;
	os_size_t totalMem;
	os_size_t freeMem;
	OsTreeNode *root;
} OsMemManager;

/*********************************************************************************************************************
* OsMemManager初始化
* memManager：内存管理器对象
* startAddress：起始内存大小
* size：内存大小
* return：成功初始化的内存大小
*********************************************************************************************************************/
os_size_t osMemManagerInit(OsMemManager *memManager, void *startAddress, os_size_t size);
/*********************************************************************************************************************
* 申请内存
* memManager：内存管理器对象
* size：要分配的内存大小
* return：NULL：分配失败：否则返回内存首地址
*********************************************************************************************************************/
void *osMemManagerAlloc(OsMemManager *memManager, os_size_t size);
/*********************************************************************************************************************
* 重新分配内存
* memManager：内存管理器对象
* address：原来的内存地址
* size：重新分配的内存地址
* return：NULL：分配失败：否则返回内存首地址
*********************************************************************************************************************/
void *osMemManagerRealloc(OsMemManager *memManager, void *address, os_size_t newSize);
/*********************************************************************************************************************
* 释放内存
* memManager：内存管理器对象
* address：要释放的内存首地址
* return：0:释放成功;
*********************************************************************************************************************/
int osMemManagerFree(OsMemManager *memManager, void *address);
/*********************************************************************************************************************
* 获取指定地址占用的内存大小
* memManager：内存管理器对象
* address：要获取的地址
* return：指定地址占用的内存大小
*********************************************************************************************************************/
os_size_t osMemManagerAllocUsableSize(OsMemManager *memManager, const void *address);
/*********************************************************************************************************************
* 申请页面
* memManager：内存管理器对象
* n：页面个数
* return：NULL：分配失败：否则返回页面首地址
*********************************************************************************************************************/
void *osMemManagerAllocPages(OsMemManager *memManager, os_size_t n);
/*********************************************************************************************************************
* 释放页面
* memManager：内存管理器对象
* pages：要释放的页面首地址
* return：0:释放成功;
*********************************************************************************************************************/
int osMemManagerFreePages(OsMemManager *memManager, void *pages);
/*********************************************************************************************************************
* 获取所有内存
* memManager：内存管理器对象
* return：所有堆空间
*********************************************************************************************************************/
os_size_t osMemManagerTotalMem(OsMemManager *memManager);
/*********************************************************************************************************************
* 获取可用内存
* memManager：内存管理器对象
* return：可用内存
*********************************************************************************************************************/
os_size_t osMemManagerFreeMem(OsMemManager *memManager);
/*********************************************************************************************************************
* 获取所有页面数量
* memManager：内存管理器对象
* return：所有页面数量
*********************************************************************************************************************/
os_size_t osMemManagerTotalPage(OsMemManager *memManager);
/*********************************************************************************************************************
* 获取可用页面数量
* memManager：内存管理器对象
* return：可用页面数量
*********************************************************************************************************************/
os_size_t osMemManagerFreePage(OsMemManager *memManager);

#ifdef __cplusplus
}
#endif
#endif