#ifndef __SYS_VECTOR_H__
#define __SYS_VECTOR_H__
#include "sys_cfg.h"
#ifdef __cplusplus
extern "C"
{
#endif
typedef struct sys_vector_t
{
	unsigned char *buff;
	int unit_size;
	int size;
	int max_size;
} sys_vector_t;
/*********************************************************************************************************************
* 初始化容器
* obj 容器对象
* unit_size 元素大小
* return 0：初始化成功
*********************************************************************************************************************/
int sys_vector_init(sys_vector_t *obj, int unit_size);
/*********************************************************************************************************************
* 释放容器
* obj 容器对象
*********************************************************************************************************************/
void sys_vector_free(sys_vector_t *obj);
/*********************************************************************************************************************
* 获取容器大小
* obj 容器对象
* return 容器大小
*********************************************************************************************************************/
int sys_vector_size(sys_vector_t *obj);
/*********************************************************************************************************************
* 获取当前最大容量
* obj 容器对象
* return 最大容量
*********************************************************************************************************************/
int sys_vector_max_size(sys_vector_t *obj);
/*********************************************************************************************************************
* 获取元素大小
* obj 容器对象
* return 元素大小
*********************************************************************************************************************/
int sys_vector_unit_size(sys_vector_t *obj);
/*********************************************************************************************************************
* 判断容器是否为空
* obj 容器对象
* return > 0:为空
*********************************************************************************************************************/
int sys_vector_empty(sys_vector_t *obj);
/*********************************************************************************************************************
* 调整容器最大容量
* obj 容器对象
* size 调整后的容量，只能比原来的大
* return 调整后的容量
*********************************************************************************************************************/
int sys_vector_resize(sys_vector_t *obj, int size);
/*********************************************************************************************************************
* 从后面添加元素
* obj 容器对象
* data 数据
* return 元素数目
*********************************************************************************************************************/
int sys_vector_push_back(sys_vector_t *obj, void *data);
/*********************************************************************************************************************
* 从前面添加元素
* obj 容器对象
* data 数据
* return 元素数目
*********************************************************************************************************************/
int sys_vector_push_front(sys_vector_t *obj, void *data);
/*********************************************************************************************************************
* 插入元素
* obj 容器对象
* data 数据
* n 插入位置
* return 元素数目
*********************************************************************************************************************/
int sys_vector_insert(sys_vector_t *obj, void *data, int n);
/*********************************************************************************************************************
* 访问最后的元素
* obj 容器对象
* return 返回的数据指针
*********************************************************************************************************************/
void *sys_vector_back(sys_vector_t *obj);
/*********************************************************************************************************************
* 访问第一个元素
* obj 容器对象
* return 返回的数据指针
*********************************************************************************************************************/
void *sys_vector_front(sys_vector_t *obj);
/*********************************************************************************************************************
* 访问元素
* obj 容器对象
* n 元素位置
* return 返回的数据指针
*********************************************************************************************************************/
void *sys_vector_at(sys_vector_t *obj, int n);
/*********************************************************************************************************************
* 移除元素
* obj 容器对象
* n 元素位置
* return 0:成功移除
*********************************************************************************************************************/
int sys_vector_erase(sys_vector_t *obj, int n);
/*********************************************************************************************************************
* 清空所有元素
* obj 容器对象
*********************************************************************************************************************/
void sys_vector_clear(sys_vector_t *obj);
/*********************************************************************************************************************
* 从后面移除一个元素
* obj 容器对象
* return 0:成功移除
*********************************************************************************************************************/
int sys_vector_pop_back(sys_vector_t *obj);
/*********************************************************************************************************************
* 从前面移除一个元素
* obj 容器对象
* return 0:成功移除
*********************************************************************************************************************/
int sys_vector_pop_front(sys_vector_t *obj);
#ifdef __cplusplus
}
#endif
#endif