#ifndef __OSSTACK_H__
#define __OSSTACK_H__
#include "osdefine.h"
#ifdef __cplusplus
extern "C"
{
#endif
typedef struct OsStack
{
	unsigned char *buff;
	size_t unitSize;
	size_t size;
	size_t maxSize;
} OsStack;
/*********************************************************************************************************************
* 初始化堆栈
* obj 堆栈对象
* unitSize 元素大小
* return 0：初始化成功
*********************************************************************************************************************/
int osStackInit(OsStack *obj, size_t unitSize);
/*********************************************************************************************************************
* 释放堆栈
* obj 堆栈对象
*********************************************************************************************************************/
void osStackFree(OsStack *obj);
/*********************************************************************************************************************
* 获取堆栈大小
* obj 堆栈对象
* return 堆栈大小
*********************************************************************************************************************/
size_t osStackSize(OsStack *obj);
/*********************************************************************************************************************
* 获取当前最大容量
* obj 堆栈对象
* return 最大容量
*********************************************************************************************************************/
size_t osStackMaxSize(OsStack *obj);
/*********************************************************************************************************************
* 获取元素大小
* obj 堆栈对象
* return 元素大小
*********************************************************************************************************************/
size_t osStackUnitSize(OsStack *obj);
/*********************************************************************************************************************
* 判断堆栈是否为空
* obj 堆栈对象
* return > 0:为空
*********************************************************************************************************************/
int osStackEmpty(OsStack *obj);
/*********************************************************************************************************************
* 调整堆栈最大容量
* obj 堆栈对象
* size 调整后的容量，只能比原来的大
* return 调整后的容量
*********************************************************************************************************************/
size_t osStackResize(OsStack *obj, size_t size);
/*********************************************************************************************************************
* 添加元素
* obj 堆栈对象
* data 数据
* return 元素数目
*********************************************************************************************************************/
size_t osStackPush(OsStack *obj, void *data);
/*********************************************************************************************************************
* 访问最后的元素
* obj 堆栈对象
* return 返回的数据指针
*********************************************************************************************************************/
void *osStackTop(OsStack *obj);
/*********************************************************************************************************************
* 弹出元素
* obj 堆栈对象
* return 0:成功移除
*********************************************************************************************************************/
int osStackPop(OsStack *obj);
#ifdef __cplusplus
}
#endif
#endif